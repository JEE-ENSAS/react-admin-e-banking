{"version":3,"sources":["views/cards/UpdateCard.js"],"names":["UpdateCard","dispatch","useDispatch","accountState","useSelector","state","cardState","list","setList","useState","card","setCard","cardFields","setCardFields","accountId","cardNumber","csv","dateExpiration","type","useEffect","getListAccountsAction","allAccounts","length","cardDetails","onChangeCardHandler","e","field","target","value","className","onChange","map","item","id","accountNumber","placeholder","onClick","async","updateCardAction","parseInt","dispalySwal","title","text","icon","err","message","updateCardhandler","Swal","fire","confirmButtonText"],"mappings":"+GAAA,uEA6IeA,UAvIf,WACE,MAAMC,EAAWC,cAEXC,EAAeC,aAAaC,GAAUA,EAAK,iBAC3CC,EAAYF,aAAaC,GAAUA,EAAK,eAEvCE,EAAMC,GAAWC,mBAAS,KAC1BC,EAAMC,GAAWF,mBAAS,KAC1BG,EAAYC,GAAiBJ,mBAAS,CAC3CK,UAAW,GACXC,WAAY,GACZC,IAAK,GACLC,eAAgB,GAChBC,KAAM,eAGRC,qBAAU,KACRlB,EAASmB,iBACR,IAEHD,qBAAU,KACRX,EAAQ,IAAIL,EAAakB,cACrBlB,EAAakB,YAAYC,OAAS,GACpCT,EAAc,IACTD,EACHE,UAAWX,EAAakB,YAAY,GAAzB,KAGfV,EAAQ,IAAKL,EAAUiB,gBACtB,CAACpB,EAAakB,YAAaf,EAAUiB,cAExC,MAAMC,EAAsB,CAACC,EAAGC,KAC9Bb,EAAc,IAAKD,EAAY,CAACc,GAAQD,EAAEE,OAAOC,SA4BnD,OACE,sBAAKC,UAAU,OAAf,UACE,sBAAKA,UAAU,0BAAf,UACE,mBAAGA,UAAU,sBADf,kBAGCnB,GAAQA,EAAI,MACX,sBAAKmB,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,6DACA,wBACEA,UAAU,eACVD,MAAOhB,EAAWE,UAClBgB,SAAWL,GAAMD,EAAoBC,EAAG,aAH1C,SAKGlB,EAAKwB,KAAKC,GACT,wBAAQJ,MAAOI,EAAKC,GAApB,SACGD,EAAKE,eADqBF,EAAKC,WAMxC,uBACA,qBAAKJ,UAAU,aAAf,SACE,uBACEA,UAAU,eACVM,YAAY,aACZP,MAAOhB,EAAWG,WAClBe,SAAWL,GAAMD,EAAoBC,EAAG,kBAG5C,uBACA,qBAAKI,UAAU,aAAf,SACE,uBACEA,UAAU,eACVM,YAAY,OACZP,MAAOhB,EAAWI,IAClBc,SAAWL,GAAMD,EAAoBC,EAAG,WAG5C,uBACA,qBAAKI,UAAU,aAAf,SACE,uBACEX,KAAK,OACLW,UAAU,eACVM,YAAY,kBACZP,MAAOhB,EAAWK,eAClBa,SAAWL,GAAMD,EAAoBC,EAAG,sBAG5C,uBACA,sBAAKI,UAAU,aAAf,UACE,uDACA,yBACEA,UAAU,eACVD,MAAOhB,EAAWM,KAClBY,SAAWL,GAAMD,EAAoBC,EAAG,QAH1C,UAKE,wBAAQG,MAAM,aAAd,wBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,UAAd,2BAGJ,uBACA,wBACEC,UAAU,yBACVO,QAAS,IA1FOC,WACxB,WACoBpC,EAChBqC,YAAiB,IACZ5B,KACAE,EACHI,IAAKuB,SAAS3B,EAAWI,SAGtB,IACLwB,EAAY,CACVC,MAAO,WACPC,KAAM,6BACNC,KAAM,YAGV,MAAOC,GACPJ,EAAY,CACVC,MAAO,aACPC,KAAM,6BAA+BE,EAAIC,QACzCF,KAAM,YAsEaG,GAFjB,gCAcV,MAAMN,EAAc,IAA4B,IAA3B,MAAEC,EAAF,KAASC,EAAT,KAAeC,GAAW,EAC7CI,IAAKC,KAAK,CACRP,QACAC,OACAC,OACAM,kBAAmB","file":"static/js/20.4a3fc9c3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Swal from \"sweetalert2\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getListAccountsAction } from \"src/actions/accountAction\";\nimport { updateCardAction } from \"src/actions/cardActions\";\n\nfunction UpdateCard() {\n  const dispatch = useDispatch();\n\n  const accountState = useSelector((state) => state[\"accountReducer\"]);\n  const cardState = useSelector((state) => state[\"cardReducer\"]);\n\n  const [list, setList] = useState([]);\n  const [card, setCard] = useState({});\n  const [cardFields, setCardFields] = useState({\n    accountId: \"\",\n    cardNumber: \"\",\n    csv: \"\",\n    dateExpiration: \"\",\n    type: \"MASTERCARD\",\n  });\n\n  useEffect(() => {\n    dispatch(getListAccountsAction());\n  }, []);\n\n  useEffect(() => {\n    setList([...accountState.allAccounts]);\n    if (accountState.allAccounts.length > 0) {\n      setCardFields({\n        ...cardFields,\n        accountId: accountState.allAccounts[0][\"id\"],\n      });\n    }\n    setCard({ ...cardState.cardDetails });\n  }, [accountState.allAccounts, cardState.cardDetails]);\n\n  const onChangeCardHandler = (e, field) => {\n    setCardFields({ ...cardFields, [field]: e.target.value });\n  };\n\n  const updateCardhandler = async () => {\n    try {\n      const res = await dispatch(\n        updateCardAction({\n          ...card,\n          ...cardFields,\n          csv: parseInt(cardFields.csv),\n        })\n      );\n      if (res[\"id\"]) {\n        dispalySwal({\n          title: \"Updated!\",\n          text: \"this card has been updated\",\n          icon: \"success\",\n        });\n      }\n    } catch (err) {\n      dispalySwal({\n        title: \"Try again!\",\n        text: \"Card has not been updated:\" + err.message,\n        icon: \"error\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header text-center\">\n        <i className=\"fa fa-pencil mx-1\"></i> Update Card\n      </div>\n      {card && card[\"type\"] && (\n        <div className=\"card-body\">\n          <div className=\"form-group\">\n            <label>Select Account Number : </label>\n            <select\n              className=\"form-control\"\n              value={cardFields.accountId}\n              onChange={(e) => onChangeCardHandler(e, \"accountId\")}\n            >\n              {list.map((item) => (\n                <option value={item.id} key={item.id}>\n                  {item.accountNumber}\n                </option>\n              ))}\n            </select>\n          </div>\n          <br></br>\n          <div className=\"form-group\">\n            <input\n              className=\"form-control\"\n              placeholder=\"cardNumber\"\n              value={cardFields.cardNumber}\n              onChange={(e) => onChangeCardHandler(e, \"cardNumber\")}\n            />\n          </div>\n          <br></br>\n          <div className=\"form-group\">\n            <input\n              className=\"form-control\"\n              placeholder=\"csv \"\n              value={cardFields.csv}\n              onChange={(e) => onChangeCardHandler(e, \"csv\")}\n            />\n          </div>\n          <br></br>\n          <div className=\"form-group\">\n            <input\n              type=\"date\"\n              className=\"form-control\"\n              placeholder=\"dateExpiration \"\n              value={cardFields.dateExpiration}\n              onChange={(e) => onChangeCardHandler(e, \"dateExpiration\")}\n            />\n          </div>\n          <br></br>\n          <div className=\"form-group\">\n            <label>Select Card Type :</label>\n            <select\n              className=\"form-control\"\n              value={cardFields.type}\n              onChange={(e) => onChangeCardHandler(e, \"type\")}\n            >\n              <option value=\"MASTERCARD\">MASTERCARD</option>\n              <option value=\"VISA\">VISA</option>\n              <option value=\"VIRTUAL\">VIRTUAL</option>\n            </select>\n          </div>\n          <br></br>\n          <button\n            className=\"btn btn-sm btn-primary\"\n            onClick={() => updateCardhandler()}\n          >\n            Update Card\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default UpdateCard;\n\nconst dispalySwal = ({ title, text, icon }) => {\n  Swal.fire({\n    title,\n    text,\n    icon,\n    confirmButtonText: \"Ok\",\n  });\n};\n"],"sourceRoot":""}